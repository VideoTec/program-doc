BMP取自位图BitMaP的缩写，也称为DIB（与设备无关的位图），
是微软视窗图形子系统（Graphics Device Interface）内部使用的一种位图图形格式，
它是微软视窗平台上的一个简单的图形文件格式。

重要的两点信息
1. 32 位，像素的字节序是，0xbbggrraa
2. 像素的，存储顺序。
The pixel array is a block of 32-bit DWORDs, that describes the image pixel by pixel. Normally pixels are stored "upside-down" with respect to normal image raster scan order, starting in the lower left corner, going from left to right, and then row by row from the bottom to the top of the image.[5] Unless BITMAPCOREHEADER is used, uncompressed Windows bitmaps also can be stored from the top to bottom, when the Image Height value is negative.

图像通常保存的颜色深度有2（1位）、16（4位）、256（8位）、65536（16位）和1670万（24位）种颜色（其中位是表示每点所用的数据位）。
8位图像可以是索引彩色图像外，也可以是灰阶图像。
表示透明的alpha通道也可以保存在一个类似于灰阶图像的独立文件中。
带有集成的alpha通道的32位版本已经随着Windows XP出现，它在视窗的登录和主题系统中都有使用

位图图像文件由若干大小固定（文件头）和大小可变的结构体按一定的顺序构成

结构体名称	可选	大小						用途									备注
位图文件头	否		14字节						存储位图文件通用信息					仅在读取文件时有用
DIB头		否		固定（存在7种不同版本）		存储位图详细信息及像素格式				紧接在位图文件头后
附加位掩码	是		3或4 DWORD（12或16字节）	定义像素格式							仅在DIB头是BITMAPINFOHEADER时存在
调色板		见备注	可变						定义图像数据（像素数组）所用颜色		色深≤ 8时不能省略
填充区A		是		可变	结构体对齐			位图文件头中像素数组偏移量的产物
像素数组	否		可变	定义实际的像素数值	像素数据在DIB头和附加位掩码中定义。像素数组中每行均以4字节对齐
填充区B		是		可变	结构体对齐			DIB头中ICC色彩特性数据偏移量的产物
ICC色彩特性数据	是	可变	定义色彩特性		可以包含外部文件路径，由该文件来定义色彩特性

必选部分：
位图文件头	否		14字节
DIB头		否		固定（存在7种不同版本）		存储位图详细信息及像素格式
像素数组	否		可变	定义实际的像素数值	像素数据在DIB头和附加位掩码中定义。像素数组中每行均以4字节对齐

typedef struct tagBITMAPINFOHEADER{
      DWORD  biSize;
      DWORD  biWidth;
      DWORD  biHeight;
      WORD   biPlanes;           = 1 Number of Color planes being used

      WORD   biBitCount          The number of Bits/Pixel
Specifies the number of bits per pixels. 
This value must be 1, 4, 8 or 24 in the 16 bit version; 
values of 16 or 32 may also be used in the 32 bit version of DaVinci.

typedef  enum 
{
  BI_RGB = 0x0000,
  BI_RLE8 = 0x0001,
  BI_RLE4 = 0x0002,
  BI_BITFIELDS = 0x0003,
  BI_JPEG = 0x0004,
  BI_PNG = 0x0005,
  BI_CMYK = 0x000B,
  BI_CMYKRLE8 = 0x000C,
  BI_CMYKRLE4 = 0x000D
} Compression;
      DWORD  biCompression;      0-BI_RGB, No compression used 只是标志，位图数据未压缩，不表示像素值的字节序
24	The bitmap can have a maximum of 2^24 (usually referred to, though not entirely accurately, as 16 million) colors. The bmciColors member is left empty. Every three bytes in the bitmap’s data field represent the relative intensities of blue, green and red for (BGR) every pixel. The order of the bytes is blue, green, red.

字节序是：BGRA，A没有使用，一般设置为0
32	The bitmap can have a maximum of 2^24 colors (see above). The bmciColors field is once again left empty. Every four bytes in the bitmap’s data field represent the relative intensities of blue, green and red (BGR) for a given pixel, and the fourth byte, which is not used, is usually set to 0

      DWORD  biSizeImage;        Size of the raw BMP Data (after this Header)
	                             The size, in bytes, of the image. This may be set to zero for BI_RGB bitmaps.

      DWORD  biXPelsPerMeter;    = 2835 Horizontal resolution of the Image
      DWORD  biYPelsPerMeter;    = 2835 Vertical resolution of the Image
Specifies the horizontal print resolution, in pixels per meter, of the target device for the bitmap.
Its not very important. You can leave them on 2835 its not going to ruin the image. 
(72 DPI × 39.3701 inches per meter yields 2834.6472)

      DWORD  biClrUsed;          = 0 Number of colors in the palette
      DWORD  biClrImportant;     = 0 Means all colors are important

   } BITMAPINFOHEADER;
   
typedef struct tagBITMAPFILEHEADER {
  WORD  bfType;  42 4D           "BM"                    Magic Number (unsigned integer 66, 77)
  DWORD bfSize;  Size of the BMP file
  WORD  bfReserved1; 00 00           Unused                  Application Specific
  WORD  bfReserved2; 00 00           Unused                  Application Specific
  DWORD bfOffBits; The offset, in bytes, from the beginning of the BITMAPFILEHEADER structure to the bitmap bits
} BITMAPFILEHEADER, *PBITMAPFILEHEADER;

下面两个结构体：
typedef struct tagBITMAPFILEHEADER {
  int16_t  bfType;
  int32_t bfSize;
  int16_t  bfReserved1;
  int16_t  bfReserved2;
  int32_t bfOffBits;
} BITMAPFILEHEADER, *PBITMAPFILEHEADER;

typedef struct tagBITMAPINFOHEADER {
  int32_t biSize;
  int32_t  biWidth;
  int32_t  biHeight;
  int16_t  biPlanes;
  int16_t  biBitCount;
  int32_t biCompression;
  int32_t biSizeImage;
  int32_t  biXPelsPerMeter;
  int32_t  biYPelsPerMeter;
  int32_t biClrUsed;
  int32_t biClrImportant;
} BITMAPINFOHEADER, *PBITMAPINFOHEADER;

写文件时，使用结构体，需要注意，字节对齐问题
下面是用两个缓存来填充，文件头
  unsigned char bitmap_file_header[14] = {0};
  unsigned char bitmap_info_header[40] = {0};
  
  bitmap_file_header[0] = 'B';
  bitmap_file_header[1] = 'M';
  *(int32_t *)(bitmap_file_header + 2) = 54 + s;
  *(int32_t *)(bitmap_file_header + 10) = 54;
  
  *(int32_t *)bitmap_info_header = 40;
  *(int32_t *)(bitmap_info_header + 4) = width;
  *(int32_t *)(bitmap_info_header + 8) = 0 - height; //default: left to right, and then row by row from the bottom to the top
  *(int16_t *)(bitmap_info_header + 12) = 1;
  *(int16_t *)(bitmap_info_header + 14) = 32;
  *(int32_t *)(bitmap_info_header + 16) = 0;
  *(int32_t *)(bitmap_info_header + 20) = s;
  *(int32_t *)(bitmap_info_header + 24) = 2835;
  *(int32_t *)(bitmap_info_header + 28) = 2835;
  *(int32_t *)(bitmap_info_header + 32) = 0;
  *(int32_t *)(bitmap_info_header + 36) = 0;